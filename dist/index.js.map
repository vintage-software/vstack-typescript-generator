{"version":3,"sources":["utility.ts","c-sharp-objects.ts","c-sharp-parser.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/// <reference path=\"options.ts\" />\r\n\r\nclass Utility {\r\n    public static translateType(csType: string, options: IOptions) {\r\n        if (['string', 'String', 'Guid'].indexOf(csType) !== -1) {\r\n            return 'string';\r\n        } else if (['bool', 'Boolean'].indexOf(csType) !== -1) {\r\n            return 'boolean';\r\n        } else if (['dynamic', 'JObject'].indexOf(csType) !== -1) {\r\n            return 'any';\r\n        } else if (['int', 'short', 'decimal', 'double', 'float', 'Int32', 'Int64'].indexOf(csType) !== -1) {\r\n            return 'number';\r\n        } else if (csType === 'DateTime') {\r\n            return options && options.dateTimeToDate ? 'Date' : 'string';\r\n        }\r\n    }\r\n}\r\n","class CSharpType {\r\n    constructor(public namespace: string, public name: string, public inherits: string) {\r\n    }\r\n}\r\n\r\nclass CSharpClassOrStruct extends CSharpType {\r\n    constructor(public namespace: string, public name: string, public inherits: string, public constructors: CSharpContructor[], public properties: CSharpProperty[]) {\r\n        super(namespace, name, inherits);\r\n    }\r\n}\r\n\r\nclass CSharpMemberType {\r\n    constructor(public name: string, public isNullable: boolean, public isCollection: boolean) {\r\n    }\r\n}\r\n\r\nclass CSharpContructor {\r\n    constructor(public parameters: CSharpParameter[]) {\r\n    }\r\n}\r\n\r\nclass CSharpMember {\r\n    constructor(public type: CSharpMemberType, public name: string) {\r\n    }\r\n}\r\n\r\nclass CSharpProperty extends CSharpMember {\r\n    constructor(public type: CSharpMemberType, public name: string) {\r\n        super(type, name);\r\n    }\r\n}\r\n\r\nclass CSharpParameter extends CSharpMember {\r\n    constructor(public type: CSharpMemberType, public name: string) {\r\n        super(type, name);\r\n    }\r\n}\r\n\r\nclass CSharpEnum extends CSharpType {\r\n    constructor(public namespace: string, public name: string, public inherits: string, public entries: CSharpEnumEntry[]) {\r\n        super(namespace, name, inherits);\r\n    }\r\n}\r\n\r\nclass CSharpEnumEntry {\r\n    constructor(public name: string, public value: number) {\r\n    }\r\n}\r\n","/// <reference path=\"c-sharp-objects.ts\" />\r\n\r\nclass CSharpParser {\r\n    public static parse(input: string): CSharpType[] {\r\n        input = CSharpParser.stripIgnored(input);\r\n        input = CSharpParser.stripComments(input);\r\n\r\n        let namespaceMatch = input.match(/namespace\\s+([\\w\\.]+)/);\r\n        let namespace = namespaceMatch ? namespaceMatch[1] : '';\r\n\r\n        let types: CSharpType[] = [];\r\n\r\n        let typeMatch: RegExpExecArray;\r\n        let typeRegex = /^([\\t ]*)(?:public\\s*|partial\\s*|abstract\\s*)*\\s*(enum|class|struct)\\s+([\\w\\d_<>]+)(?:\\s*:\\s*((?:(?:[\\w\\d\\.\\<\\>_]+)(?:,\\s+)?)+))?\\s*\\{((?:.|\\n|\\r)*?)^\\1\\}/gm;\r\n        let getNextTypeMatch = () => typeMatch = typeRegex.exec(input);\r\n        while (getNextTypeMatch() !== null) {\r\n            let type = typeMatch[2];\r\n            let name = typeMatch[3];\r\n            let inherits = typeMatch[4];\r\n            let body = typeMatch[5];\r\n\r\n            if (type === 'class' || type === 'struct') {\r\n                types.push(CSharpParser.parseClassOrStruct(namespace, name, inherits, body));\r\n            } else if (type === 'enum') {\r\n                types.push(CSharpParser.parseEnum(namespace, name, inherits, body));\r\n            }\r\n        }\r\n\r\n        return types;\r\n    }\r\n\r\n    private static stripIgnored(input: string): string {\r\n        let ignoredRegex = /\\/\\/\\s*ts-generator-ignore\\s*.*(enum|class|struct)\\s+/gm;\r\n\r\n        return input.replace(ignoredRegex, '');\r\n    }\r\n\r\n    private static stripComments(input: string): string {\r\n        let blockCommentRegex = new RegExp('/\\\\*([\\\\s\\\\S]*)\\\\*/', 'gm');\r\n        let lineCommentRegex = new RegExp('//(.*)', 'g');\r\n\r\n        return input\r\n            .replace(blockCommentRegex, '')\r\n            .split('\\n')\r\n            .map(line => line.replace(lineCommentRegex, ''))\r\n            .join('\\n');\r\n    }\r\n\r\n    private static parseClassOrStruct(namespace: string, name: string, inherits: string, body: string) {\r\n        let constructors: CSharpContructor[] = [];\r\n        let constructorMatch: RegExpExecArray;\r\n        let constructorRegex = /public\\s+([\\w]+)\\s*\\(((?:.|\\n)*?)\\)/gm;\r\n        let getNextConstructorMatch = () => constructorMatch = constructorRegex.exec(body);\r\n        while (getNextConstructorMatch() !== null) {\r\n            let typeName = constructorMatch[1];\r\n            let parameterList = constructorMatch[2];\r\n\r\n            if (typeName === name) {\r\n                let parameters = parameterList.length ? parameterList\r\n                    .split(',')\r\n                    .map(parameter => {\r\n                        let parameterMatch = parameter.trim().match(/([^\\s]+)\\s+([\\w\\d]+)/);\r\n                        let parameterType = CSharpParser.parseMemberTypeName(parameterMatch[1]);\r\n                        let parameterName = parameterMatch[2];\r\n                        return new CSharpParameter(parameterType, parameterName);\r\n                    }) : [];\r\n\r\n                constructors.push(new CSharpContructor(parameters));\r\n            }\r\n        }\r\n\r\n        let properties: CSharpProperty[] = [];\r\n        let propertyMatch: RegExpExecArray;\r\n        let propertyRegex = /public\\s*([^\\s]+)\\s*([\\w\\d]+)\\s*{\\s*get;\\s*set;\\s*}/gm;\r\n        let getNextPropertyMatch = () => propertyMatch = propertyRegex.exec(body);\r\n        while (getNextPropertyMatch() !== null) {\r\n            let typeName = propertyMatch[1];\r\n            let propertyName = propertyMatch[2];\r\n\r\n            let memberType = CSharpParser.parseMemberTypeName(typeName);\r\n\r\n            properties.push(new CSharpProperty(memberType, propertyName));\r\n        }\r\n\r\n        return new CSharpClassOrStruct(namespace, name, inherits, constructors, properties);\r\n    }\r\n\r\n    private static parseEnum(namespace: string, name: string, inherits: string, body: string) {\r\n        let entries: CSharpEnumEntry[] = [];\r\n\r\n        let entryMatch: RegExpExecArray;\r\n        let entryRegex = /([^\\s,]+)\\s*=?\\s*(\\d+)?,?/gm;\r\n        let getNextEntryMatch = () => entryMatch = entryRegex.exec(body);\r\n        while (getNextEntryMatch() !== null) {\r\n            let entryName = entryMatch[1];\r\n            let entryValue = parseInt(entryMatch[2], 10);\r\n\r\n            if (entryName.indexOf('[') === -1) {\r\n                entries.push(new CSharpEnumEntry(entryName, entryValue));\r\n            }\r\n        }\r\n\r\n        return new CSharpEnum(namespace, name, inherits, entries);\r\n    }\r\n\r\n    private static parseMemberTypeName(typeName: string): CSharpMemberType {\r\n        let lastNameRegex = /\\.?([\\w<>\\[\\]\\?]+)$/;\r\n\r\n        typeName = typeName.match(lastNameRegex)[1];\r\n\r\n        let nullableRegex = /(?:^Nullable<([^\\s]+)>$)|(?:^([^\\s]+)\\?$)/;\r\n        let nullableMatch = nullableRegex.exec(typeName);\r\n        if (nullableMatch) {\r\n            typeName = (nullableMatch[1] || nullableMatch[2]).match(lastNameRegex)[1];\r\n        }\r\n\r\n        let collectionRegex = /(?:^(?:List|IEnumerable)<([\\w\\d]+)>$)|(?:^([\\w\\d]+)\\[\\]$)/;\r\n        let collectionMatch = collectionRegex.exec(typeName);\r\n        if (collectionMatch) {\r\n            typeName = (collectionMatch[1] || collectionMatch[2]).match(lastNameRegex)[1];\r\n        }\r\n\r\n        return new CSharpMemberType(typeName, !!nullableMatch, !!collectionMatch);\r\n    }\r\n}\r\n","/// <reference path=\"options.ts\" />\r\n/// <reference path=\"utility.ts\" />\r\n/// <reference path=\"c-sharp-parser.ts\" />\r\n'use strict';\r\n\r\ndeclare var module: any;\r\ndeclare var require: (i: string) => any;\r\n\r\nlet pluralize = require('pluralize'); // import not working\r\n\r\nconst primaryFilterRegex = /^(?:IPrimaryFilter)<Dmn.([\\w]+)/;\r\nconst primaryDtoFilterRegex = /^(?:IPrimaryRestFilter|BasePrimaryUndeletedFilter|BasePrimaryFilter|IPrimaryDtoFilter)<Dmn.([\\w]+)/;\r\n\r\nmodule.exports = function (input: string, options: IOptions) {\r\n    let results: string[] = [];\r\n\r\n    let types = CSharpParser.parse(input);\r\n    for (let type of types) {\r\n        let isPrimaryFilter = type.inherits && !!type.inherits.match(primaryFilterRegex);\r\n        let isPrimaryDtoFilter = type.inherits && !!type.inherits.match(primaryDtoFilterRegex);\r\n\r\n        if (type instanceof CSharpEnum) {\r\n            results.push(generateEnum(<CSharpEnum>type, options));\r\n        } else if (type instanceof CSharpClassOrStruct && !isPrimaryFilter && !isPrimaryDtoFilter) {\r\n            results.push(generateInterface(<CSharpClassOrStruct>type, options));\r\n        } else if (type instanceof CSharpClassOrStruct && isPrimaryDtoFilter) {\r\n            results.push(generatePrimaryFilter(<CSharpClassOrStruct>type, options));\r\n        }\r\n    }\r\n\r\n    let result = results.join('\\n\\n');\r\n\r\n    if (result && options && options.baseNamespace) {\r\n        let indentedResult = result\r\n            .split('\\n')\r\n            .map(line =>  line ? `    ${line}` : '')\r\n            .join('\\n');\r\n\r\n        result = `module ${options.baseNamespace} {\\n${indentedResult}\\n}`;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nfunction generateEnum(cSharpEnum: CSharpEnum, options: IOptions): string {\r\n    'use strict';\r\n\r\n    let modifier = options && options.baseNamespace ? 'export' : 'declare';\r\n\r\n    let nextIndex = 0;\r\n    let entryStrings: string[] = [];\r\n    for (let entry of cSharpEnum.entries) {\r\n        entryStrings.push(`${entry.name} = ${entry.value || nextIndex}`);\r\n\r\n        nextIndex = isNaN(entry.value) ? nextIndex + 1 : entry.value + 1;\r\n    }\r\n\r\n    return `${modifier} enum ${cSharpEnum.name} {\\n    ${entryStrings.join(',\\n    ')}\\n}`;\r\n}\r\n\r\nfunction generateInterface(type: CSharpClassOrStruct, options: IOptions): string {\r\n    'use strict';\r\n\r\n    let prefixWithI = options && options.prefixWithI;\r\n    let ignoreInhertitance = options && options.ignoreInheritance && options.ignoreInheritance.indexOf(type.inherits) !== -1;\r\n\r\n    let modifier = options && options.baseNamespace ? 'export ' : '';\r\n    let tsInterfaceName = prefixWithI ? `I${type.name}` : type.name;\r\n    let tsExtends = type.inherits && !ignoreInhertitance ? ` extends ${type.inherits}` : '';\r\n\r\n    let propertyStrings: string[] = [];\r\n    for (let property of type.properties) {\r\n        let tsPropertyName = options && options.propertyNameResolver ? options.propertyNameResolver(property.name) : property.name;\r\n        if (property.type.isNullable) {\r\n            tsPropertyName += '?';\r\n        }\r\n\r\n        let tsType = Utility.translateType(property.type.name, options) || `${prefixWithI ? 'I' : ''}${property.type.name}`;\r\n        if (property.type.isCollection) {\r\n            tsType += '[]';\r\n        }\r\n\r\n        propertyStrings.push(`${tsPropertyName}: ${tsType}`);\r\n    }\r\n\r\n    return `${modifier}interface ${tsInterfaceName}${tsExtends} {\\n    ${propertyStrings.join(';\\n    ')};\\n}`;\r\n}\r\n\r\nfunction generatePrimaryFilter(type: CSharpClassOrStruct, options: IOptions): string {\r\n    'use strict';\r\n\r\n    let modifier = options && options.baseNamespace ? 'export ' : '';\r\n\r\n    let domainType = type.inherits.match(primaryDtoFilterRegex)[1];\r\n    let filterGroup = pluralize(domainType);\r\n    let filterType = options && options.dtoNamespace ? `${options.dtoNamespace}.${domainType}` : domainType;\r\n\r\n    let tsConstructorParameters: string[] = [];\r\n    let filterParameters: string[] = [];\r\n    if (type.constructors.length === 1) {\r\n        for (let parameter of type.constructors[0].parameters) {\r\n            let tsParameterType = Utility.translateType(parameter.type.name, options);\r\n\r\n            let shouldEncode = tsParameterType === 'string' || tsParameterType === 'any' || tsParameterType === 'Date';\r\n            let shouldToString = tsParameterType !== 'string';\r\n            let toString = tsParameterType === 'Date' ? 'toISOString' : 'toString';\r\n\r\n            if (parameter.type.isCollection) {\r\n                tsParameterType += '[]';\r\n            }\r\n            tsConstructorParameters.push(`private ${parameter.name}: ${tsParameterType}`);\r\n\r\n            let filterParameter: string;\r\n            if (parameter.type.isCollection) {\r\n                let mapToExpression = 'i';\r\n                if (shouldToString) {\r\n                    mapToExpression = `i.${toString}()`;\r\n                }\r\n                if (shouldEncode) {\r\n                    mapToExpression = `encodeURIComponent(${mapToExpression})`;\r\n                }\r\n                let mapCall = mapToExpression !== 'i' ? `.map(i => ${mapToExpression})` : '';\r\n\r\n                filterParameter = `this.${parameter.name}${mapCall}.join(',')`;\r\n            } else {\r\n                filterParameter = `this.${parameter.name}`;\r\n                if (shouldToString) {\r\n                    filterParameter = `${filterParameter}.${toString}()`;\r\n                }\r\n                if (shouldEncode) {\r\n                    filterParameter = `encodeURIComponent(${filterParameter})`;\r\n                }\r\n            }\r\n            filterParameters.push(filterParameter);\r\n        }\r\n    }\r\n\r\n    let result = '';\r\n    result += `${modifier}class ${filterGroup}${type.name}Filter implements IPrimaryFilter<${filterType}> {\\n`;\r\n    result += `    constructor(${tsConstructorParameters.join(', ')}) {\\n`;\r\n    result += `    }\\n\\n`;\r\n\r\n    result += `    public getFilterName(): string {\\n`;\r\n    result += `        return '${type.name}';\\n`;\r\n    result += `    }\\n\\n`;\r\n\r\n    result += `    public getParameters(): string[] {\\n`;\r\n    result += `        return [${filterParameters.join(', ')}];\\n`;\r\n    result += `    }\\n`;\r\n    result += `}`;\r\n    return result;\r\n}\r\n"],"sourceRoot":"src/"}